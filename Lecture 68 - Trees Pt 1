#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
    }
};

// Binary Tree class
class BinaryTree {
public:
    Node* root;

    BinaryTree() {
        root = nullptr;
    }

    // Insert a node in the binary tree
    Node* insert(Node* node, int data) {
        if (node == nullptr) {
            return new Node(data);
        }
        if (data < node->data) {
            node->left = insert(node->left, data);
        } else {
            node->right = insert(node->right, data);
        }
        return node;
    }

    // In-order traversal
    void inorderTraversal(Node* node) {
        if (node != nullptr) {
            inorderTraversal(node->left);
            cout << node->data << " ";
            inorderTraversal(node->right);
        }
    }

    // Pre-order traversal
    void preorderTraversal(Node* node) {
        if (node != nullptr) {
            cout << node->data << " ";
            preorderTraversal(node->left);
            preorderTraversal(node->right);
        }
    }

    // Post-order traversal
    void postorderTraversal(Node* node) {
        if (node != nullptr) {
            postorderTraversal(node->left);
            postorderTraversal(node->right);
            cout << node->data << " ";
        }
    }

    // Display tree
    void displayTree(Node* node, int space = 0, int height = 10) {
        if (node == nullptr) return;
        space += height;
        displayTree(node->right, space);
        cout << endl;
        for (int i = height; i < space; i++) cout << " ";
        cout << node->data << "\n";
        displayTree(node->left, space);
    }
};

int main() {
    BinaryTree tree;

    tree.root = tree.insert(tree.root, 50);
    tree.insert(tree.root, 30);
    tree.insert(tree.root, 20);
    tree.insert(tree.root, 40);
    tree.insert(tree.root, 70);
    tree.insert(tree.root, 60);
    tree.insert(tree.root, 80);

    cout << "In-order traversal: ";
    tree.inorderTraversal(tree.root);
    cout << endl;

    cout << "Pre-order traversal: ";
    tree.preorderTraversal(tree.root);
    cout << endl;

    cout << "Post-order traversal: ";
    tree.postorderTraversal(tree.root);
    cout << endl;

    cout << "Tree structure:\n";
    tree.displayTree(tree.root);

    return 0;
}
