#include <iostream>
#include <list>
#include <vector>
using namespace std;

class HashTable {
private:
    vector<list<int>> table;
    int size;

    // Hash function to map values to key
    int hashFunction(int key) {
        return key % size;
    }

public:
    HashTable(int size) : size(size) {
        table.resize(size);
    }

    // Function to insert a key into the hash table
    void insert(int key) {
        int index = hashFunction(key);
        table[index].push_back(key);
    }

    // Function to delete a key from the hash table
    void remove(int key) {
        int index = hashFunction(key);
        table[index].remove(key);
    }

    // Function to search for a key in the hash table
    bool search(int key) {
        int index = hashFunction(key);
        for (auto it = table[index].begin(); it != table[index].end(); ++it) {
            if (*it == key) {
                return true;
            }
        }
        return false;
    }

    // Function to display the hash table
    void display() {
        for (int i = 0; i < size; i++) {
            cout << "Index " << i << ": ";
            for (auto& key : table[i]) {
                cout << key << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    int size = 7; // Size of the hash table
    HashTable hashTable(size);

    // Inserting keys into the hash table
    hashTable.insert(10);
    hashTable.insert(20);
    hashTable.insert(15);
    hashTable.insert(7);
    hashTable.insert(8);
    hashTable.insert(12);
    hashTable.insert(27);

    cout << "Hash table after insertion:" << endl;
    hashTable.display();

    // Searching for keys in the hash table
    int key = 15;
    if (hashTable.search(key)) {
        cout << "Key " << key << " found in the hash table." << endl;
    } else {
        cout << "Key " << key << " not found in the hash table." << endl;
    }

    // Deleting a key from the hash table
    hashTable.remove(15);
    cout << "Hash table after deleting key 15:" << endl;
    hashTable.display();

    return 0;
}
